services:
  # Kafka and Zookeeper for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: vitaex-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zk_data:/var/lib/zookeeper/data
      - zk_logs:/var/lib/zookeeper/log
    networks:
      - vitaex-net

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: vitaex-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - vitaex-net
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL with TimescaleDB and PGVector for time-series and vector data
  # FIXED: Using ARM64-compatible TimescaleDB image
  timescaledb:
    image: timescale/timescaledb:latest-pg16
    hostname: timescaledb  
    container_name: vitaex-timescaledb
    environment:
      POSTGRES_DB: vitaex_ts
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      # Enable required extensions
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
      - ./scripts/init-extensions.sql:/docker-entrypoint-initdb.d/01-init-extensions.sql:ro
    networks:
      - vitaex-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d vitaex_ts"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j for knowledge graph
  neo4j:
    image: neo4j:5.20.0
    hostname: neo4j
    container_name: vitaex-neo4j
    environment:
      NEO4J_AUTH: neo4j/password
      NEO4J_PLUGINS: '["apoc", "gds"]'
      NEO4J_dbms_security_procedures_unrestricted: apoc.*,gds.*
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 1g
    ports:
      - "7474:7474" # HTTP
      - "7687:7687" # Bolt
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    networks:
      - vitaex-net
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching and session management (optional)
  redis:
    image: redis:7.0-alpine
    hostname: redis
    container_name: vitaex-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - vitaex-net
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Kafka UI for development monitoring
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: vitaex-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: vitaex-local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports:
      - "8081:8080"
    networks:
      - vitaex-net

# Persistent volumes for data
volumes:
  zk_data:
    driver: local
  zk_logs:
    driver: local
  kafka_data:
    driver: local
  timescale_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  redis_data:
    driver: local

# Custom network for service communication
networks:
  vitaex-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16