from typing import Any, Dict, Optional
from datetime import datetime

JsonDict = Dict[str, Any]

# OMOP CDM v5.4 standard concept IDs for common measurement types
# In production, these would come from a vocabulary service/database
MEASUREMENT_CONCEPT_MAP = {
    # Vital signs
    "heart rate": 3027018,
    "hrv": 40771025,  # Heart rate variability
    "blood pressure": 3004249,
    "systolic": 3018586,
    "diastolic": 3012888,
    "body temperature": 3020891,
    "respiratory rate": 3024171,
    "vo2max": 40764999,
    
    # Lab values
    "glucose": 3004501,
    "hba1c": 3004410,
    "a1c": 3004410,
    "cholesterol": 3019900,
    "ldl": 3011884,
    "hdl": 3007070,
    "triglycerides": 3022038,
    "crp": 3020630,
    "c-reactive protein": 3020630,
    "cortisol": 3006923,
    "vitamin d": 3003285,
    "25-hydroxyvitamin d": 3003285,
    "homocysteine": 3002385,
    "insulin": 3005033,
    "tsh": 3016293,
    "testosterone": 3004239,
    "hemoglobin": 3000963,
    "ferritin": 3004055,
    "creatinine": 3016723,
    "albumin": 3024561,
}

UNIT_CONCEPT_MAP = {
    "mg/dl": 8840,
    "mg/dL": 8840,
    "mmol/l": 8753,
    "mmol/L": 8753,
    "%": 8554,
    "bpm": 8541,  # beats per minute
    "ms": 8555,  # milliseconds
    "ng/ml": 8842,
    "ng/mL": 8842,
    "pmol/l": 9093,
    "pmol/L": 9093,
    "u/l": 8645,
    "U/L": 8645,
    "g/dl": 8713,
    "g/dL": 8713,
}

MEASUREMENT_TYPE_CONCEPTS = {
    "vital-signs": 44818701,  # From physical examination
    "laboratory": 44818702,    # Lab result
    "wearable": 32856,         # Remote monitoring
    "patient-reported": 32865, # Patient reported
}


def fhir_observation_to_omop_measurement(observation: JsonDict) -> JsonDict:
    """
    Convert FHIR Observation to OMOP CDM v5.4 measurement table format.
    
    This implementation maps FHIR fields to proper OMOP measurement columns
    with concept IDs where available. Unknown concepts are preserved in
    source_value fields for later vocabulary mapping.
    """
    # Extract FHIR fields
    code_text = observation.get("code", {}).get("text", "unknown").lower()
    ts = observation.get("effectiveDateTime")
    value_quantity = observation.get("valueQuantity", {})
    value = value_quantity.get("value")
    unit = value_quantity.get("unit", "").lower()
    
    # Extract patient ID from subject reference
    subject_ref = observation.get("subject", {}).get("reference", "Patient/unknown")
    person_id = subject_ref.split("/")[-1]
    
    # Map to concept IDs
    measurement_concept_id = MEASUREMENT_CONCEPT_MAP.get(code_text, 0)
    unit_concept_id = UNIT_CONCEPT_MAP.get(unit, 0)
    
    # Determine measurement type from category
    category_code = "unknown"
    if observation.get("category"):
        category_code = observation["category"][0].get("coding", [{}])[0].get("code", "unknown")
    
    measurement_type_concept_id = MEASUREMENT_TYPE_CONCEPTS.get(category_code, 32817)  # Default: EHR
    
    # Parse datetime for separate date and time fields
    measurement_datetime = None
    measurement_date = None
    measurement_time = None
    
    if ts:
        try:
            dt = datetime.fromisoformat(ts.replace('Z', '+00:00'))
            measurement_datetime = dt.isoformat()
            measurement_date = dt.date().isoformat()
            measurement_time = dt.time().isoformat()
        except (ValueError, AttributeError):
            measurement_datetime = ts
    
    # Build OMOP measurement record
    omop_measurement = {
        # Required fields
        "measurement_id": None,  # Generated by database
        "person_id": person_id,
        "measurement_concept_id": measurement_concept_id,
        "measurement_date": measurement_date,
        "measurement_datetime": measurement_datetime,
        "measurement_time": measurement_time,
        "measurement_type_concept_id": measurement_type_concept_id,
        
        # Value fields
        "value_as_number": value,
        "value_as_concept_id": None,  # For categorical values
        "unit_concept_id": unit_concept_id,
        
        # Optional fields
        "operator_concept_id": 4172703,  # = (equals)
        "range_low": None,
        "range_high": None,
        
        # Source fields for unmapped concepts
        "measurement_source_value": observation.get("code", {}).get("text", ""),
        "measurement_source_concept_id": 0,
        "unit_source_value": unit,
        "value_source_value": str(value) if value is not None else None,
        
        # Provider and visit (would be populated from context)
        "provider_id": None,
        "visit_occurrence_id": None,
        "visit_detail_id": None,
        
        # Additional metadata
        "meta": observation.get("meta", {})
    }
    
    return omop_measurement


def fhir_observation_to_omop_observation(observation: JsonDict) -> JsonDict:
    """
    Convert FHIR Observation to OMOP CDM v5.4 observation table format.
    
    Used for qualitative observations that don't fit the measurement table
    (e.g., symptoms, lifestyle factors).
    """
    code_text = observation.get("code", {}).get("text", "unknown").lower()
    ts = observation.get("effectiveDateTime")
    subject_ref = observation.get("subject", {}).get("reference", "Patient/unknown")
    person_id = subject_ref.split("/")[-1]
    
    # Parse datetime
    observation_datetime = None
    observation_date = None
    
    if ts:
        try:
            dt = datetime.fromisoformat(ts.replace('Z', '+00:00'))
            observation_datetime = dt.isoformat()
            observation_date = dt.date().isoformat()
        except (ValueError, AttributeError):
            observation_datetime = ts
    
    # Determine observation type
    category_code = "unknown"
    if observation.get("category"):
        category_code = observation["category"][0].get("coding", [{}])[0].get("code", "unknown")
    
    observation_type_concept_id = 32817  # EHR observation (default)
    if category_code == "patient-reported":
        observation_type_concept_id = 32865
    
    omop_observation = {
        # Required fields
        "observation_id": None,  # Generated by database
        "person_id": person_id,
        "observation_concept_id": 0,  # Would map from code_text
        "observation_date": observation_date,
        "observation_datetime": observation_datetime,
        "observation_type_concept_id": observation_type_concept_id,
        
        # Value fields
        "value_as_string": observation.get("valueString"),
        "value_as_number": observation.get("valueQuantity", {}).get("value"),
        "value_as_concept_id": None,
        
        # Source fields
        "observation_source_value": code_text,
        "observation_source_concept_id": 0,
        
        # Optional fields
        "qualifier_concept_id": None,
        "unit_concept_id": None,
        "provider_id": None,
        "visit_occurrence_id": None,
        "visit_detail_id": None,
        
        # Metadata
        "meta": observation.get("meta", {})
    }
    
    return omop_observation


def fhir_observation_to_omop(observation: JsonDict) -> JsonDict:
    """
    Main conversion function that routes to measurement or observation table.
    
    Quantitative values go to measurement table, qualitative to observation.
    """
    # Determine if this is a measurement (has numeric value) or observation
    if observation.get("valueQuantity", {}).get("value") is not None:
        return fhir_observation_to_omop_measurement(observation)
    else:
        return fhir_observation_to_omop_observation(observation)